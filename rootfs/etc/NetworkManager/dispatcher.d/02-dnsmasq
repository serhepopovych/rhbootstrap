#!/bin/sh

# Requires: grep(1), sed(1), date(1), cat(1), kill(1)

# Set option(s)
set -e
set -u

# Enable debug/trace
#exec 2>"/tmp/${0##*/}.debug.$(date '+%s.%N')"
#set >&2
#set -x

# Usage: $prog_name <interface> <action>
[ $# -ge 2 ] || exit 0

# Usage: header
header()
{
    {
        echo "# Automatically generated by $0 at $(date '+%F %T %z')"
        echo "# MODIFICATIONS TO THIS FILE WILL BE LOST; DO NOT EDIT"
        echo
    } >"$servers_file"
}

# Usage: begin <iface>
begin()
{
    echo "## Begin-Iface: $1"
}

# Usage: end <iface>
end()
{
    echo "##   End-Iface: $1"
}

# Usage: remove <iface>
remove()
{
    sed -i "$servers_file" \
        -e "/^$(begin $1)$/,/^$(end $1)$/d" \
        #
}

# Usage: uniq <item1> <item2> [<item1>]...
uniq()
{
    [ -n "${*##*|*}" ] || return 123

    local ifs="$IFS"
    IFS='|'
    local items="|$*|"

    local ustr='|'
    while [ $# -gt 0 ]; do
        [ -z "$1" -o -z "${ustr##*|$1|*}" ] || ustr="$ustr$1|"
        shift
    done

    ustr="${ustr#|}" && ustr="${ustr%|}" && echo $ustr
    IFS="$ifs"
}

# Usage: expand_from_file <profile>
expand_from_file()
{
    [ -r "$1" ] || return 0

    eval $(
        # Source in subshell to not polute environment
        . "$1" >/dev/null 2>&1 || exit 0

        # $DOMAIN
        [ -z "${DOMAIN-}" ] ||
            echo "IP4_DOMAINS='$(uniq ${IP4_DOMAINS-} $DOMAIN)'"

        # $DNSX, X = 1 .. 3
        NS=''

        [ -z "${DNS-}"  ] || NS="${NS:+$NS }$DNS"
        [ -z "${DNS1-}" ] || NS="${NS:+$NS }$DNS1"
        [ -z "${DNS2-}" ] || NS="${NS:+$NS }$DNS2"
        [ -z "${DNS3-}" ] || NS="${NS:+$NS }$DNS3"

        [ -z "${NS-}" ] ||
            echo "IP4_NAMESERVERS='$(uniq ${IP4_NAMESERVERS-} $NS)'"
    )
}

# Usage: up <iface>
up()
{
    # Override search domains and nameservers in case of VPN connection
    if [ -n "${VPN_IP_IFACE-}" ]; then
        [ -z "${VPN_IP4_DOMAINS-}" ] ||
            IP4_DOMAINS="$(uniq $VPN_IP4_DOMAINS)"
        [ -z "${VPN_IP4_NAMESERVERS-}" ] ||
            IP4_NAMESERVERS="$(uniq $VPN_IP4_NAMESERVERS)"
    fi

    # Try to find additional search domains and nameservers in connection file
    if [ -n "${CONNECTION_FILENAME-}" ] &&
       [ -n "${CONNECTION_FILENAME##*/network-scripts/ifcfg-$1}" ]
    then
        expand_from_file "$CONNECTION_FILENAME"
    fi

    # Add search domains and nameservers in case of ifcfg-rh
    expand_from_file "/etc/sysconfig/network-scripts/ifcfg-$1"

    if [ -s "$servers_file" ]; then
        remove "$iface"
    else
        header
    fi

    {
        begin "$iface"
        for domain in ${IP4_DOMAINS-}; do
            echo
            echo "# $domain"
            for server in ${IP4_NAMESERVERS-}; do
                echo "server=/$domain/$server"
            done
        done
        echo
        end "$iface"
    } >>"$servers_file"
}

# Usage: down <iface>
down()
{
    remove "$iface"

    grep -q "^$(begin '.\+')$" "$servers_file" || : >"$servers_file" ||:
}

# For VPN we called two times for same interface. Let's distinguish them.
action="${2#vpn-}" && [ "$action" != "$2" ] && iface="$1:vpn" || iface="$1"

# See how we are called
case "$action" in
    'up'|'down')
        rundir='/run'

        # Prepare servers-file for dnsmasq(8)
        servers_file="$rundir/dnsmasq.servers-file" "$action" "$1"

        # Notify dnsmasq(8) when it is running
        if pid="$rundir/dnsmasq.pid" && [ -r "$pid" ] &&
           pid="$(cat "$pid")"       && [ -n "$pid" ] && kill -0 "$pid"
        then
            kill -HUP "$pid" ||:
        fi
        ;;
esac

exit 0
